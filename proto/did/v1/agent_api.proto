syntax = "proto3";

package did.v1;

option go_package = "did/v1;didv1";

import "google/protobuf/empty.proto";
import "third_party/google/api/annotations.proto";

// AgentAPI defines the network protocol as detailed in the DID Method specification.
service AgentAPI {
  // Reachability test.
  rpc Ping (google.protobuf.Empty) returns (PingResponse) {
    option (google.api.http) = {
      get: "/v1/ping"
    };
  }
  // Process an incoming request ticket.
  rpc Process (ProcessRequest) returns (ProcessResponse) {
    option (google.api.http) = {
      post: "/v1/process"
      body: "*"
    };
  }
  // Return the current state of a DID subject.
  rpc Query (QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/v1/retrieve/{method}/{subject}"
    };
  }
}

// Ticket required for write operations.
message Ticket {
  // UNIX timestamp (in UTC) when the ticket was generated.
  // All ticket automatically expire after 5 minutes to
  // prevent replay attacks.
  int64 timestamp = 1;
  // Nonce selected to solve the PoW challenge.
  int64 nonce_value = 2;
  // Cryptographic key identifier. Must be a valid 'authentication' method
  // on the DID document. The key will be used to generate the DID proof
  // and to sign the ticket itself.
  string key_id = 3;
  // JSON encoded DID document.
  bytes document = 4;
  // JSON encoded Proof document.
  bytes proof = 5;
  // Digital signature for the ticket, it's calculated using the
  // PoW solution as input.
  bytes signature = 6;
}

// Basic reachability test response.
message PingResponse {
  // Responsiveness result.
  bool ok = 1;
}

// Mutation request, either to publish or deactivate a DID record.
message ProcessRequest {
  // Available mutations.
  enum Task {
    TASK_UNSPECIFIED = 0;
    TASK_PUBLISH = 1;
    TASK_DEACTIVATE = 2;
  }

  // Mutation type.
  Task task = 1;
  // Request ticket.
  Ticket ticket = 2;
}

// Mutation result.
message ProcessResponse {
  // Processing result, must be 'true' if the mutation was
  // properly applied.
  bool ok = 1;
}

// Queries allow to resolve a previously registered DID document.
message QueryRequest {
  // DID method.
  string method = 1;
  // DID subject.
  string subject = 2;
}

// Query response.
message QueryResponse {
  // JSON-encoded DID document.
  bytes document = 1;
  // JSON-encoded DID proof.
  bytes proof = 2;
}
