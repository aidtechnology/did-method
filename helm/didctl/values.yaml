# Application-specific configuration options. Will be stored as a configmap
# and provided to the deployment as a configuration file.
# The file will be mounted by default at: /etc/didctl/config.yaml
configuration:
  agent:
    pow: 16
    methods:
      - bryk
    otel:
      collector: "" # localhost:4317
      attributes:
        environment: dev
    rpc:
      network_interface: all
      port: 9090
      http: true
      resource_limits:
        connections: 1000
        requests: 50
        rate: 5000
      tls:
        enabled: false
        system_ca: true
        cert: "/etc/didctl/tls/tls.crt"
        key: "/etc/didctl/tls/tls.key"
        custom_ca: []
  resolver:
    - method: bryk
      endpoint: "https://did.bryk.io/v1/retrieve/{{.Method}}/{{.Subject}}"
      protocol: http
    - method: ccp
      endpoint: https://did.baidu.com/v1/did/resolve/{{.DID}}
      protocol: http
    - method: stack
      endpoint: https://core.blockstack.org/v1/dids/{{.DID}}
      protocol: http

# Service access settings.
access:
  # Internal service type; used for "within cluster" communications.
  serviceType: ClusterIP
  # The port used within the cluster when communicating with the service.
  port: 9090
  # An ingress is required to enable access to the service from outside the
  # cluster, i.e., by internet users.
  ingress:
    # Enable/disable public access completely.
    enabled: false
    # Provide TLS termination at ingress level; using the `tlsSecretName` credentials.
    tls: false
    # The encrypted traffic will be passed "as-is" to the service pods. The drawback with
    # this approach in that the ingress controller is not capable of modifying the encrypted
    # headers to add the PROXY protocol data and the service wonâ€™t receive the real user IP.
    tlsPassthrough: false
    # Specify which ingress controller should be used. If omitted the default
    # cluster value will be used.
    className: ""
    # Additional ingress configuration settings.
    annotations: {}
    # Hostname (usually a public domain) that will be used to access the
    # service.
    host: chart-example.local
    # HTTP traffic settings.
    http:
      # Expect and handle incoming HTTP traffic.
      enabled: true
      # Whether the Pod itself is serving secure traffic (HTTPS)
      secureBackend: false
      # Path prefixes used to identity incoming HTTP(S) traffic to the service.
      # For example: chart-example.local/api
      paths:
        - /v1
    # gRPC traffic settings:
    grpc:
      # Enable direct gRPC access to the service.
      enabled: true
      # Whether the Pod itself is serving secure traffic.
      secureBackend: false
      # List of gRPC services exposed by the server. Will be used
      # to configure ingress paths. The service identifiers are of the
      # form: `protobuf_package.service`
      services:
        - did.v1.AgentAPI

# Release naming rules.
nameOverride: ""
fullnameOverride: ""

# If provided, these TLS credentials will be mounted as a volume
# on the deployment and (if enabled) used by the ingress for TLS termination.
# Credentials will be mounted by default at: `/etc/{{ .Chart.Name }}/tls`
tlsSecretName: "tls-secret-name-here"

# Basic deployment settings.
replicaCount: 1
revisionHistoryLimit: 3
image:
  repository: ghcr.io/aidtechnology/didctl
  pullPolicy: IfNotPresent
  # Image registry credentials, provided as a simple list.
  # https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  pullSecrets: []
  # - my-registry

# Additional deployment annotations.
annotations: {}

# linkerd.io/inject: enabled
# Custom environment variables for the container.
# https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
env: []
  # - name: DEMO_GREETING
  #   value: "Hello from the environment"

# Health probes.
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe: {}
readinessProbe: {}

# Persistent storage.
# https://kubernetes.io/docs/concepts/storage/persistent-volumes/
persistence:
  enabled: false
  # If set to true; the created volume won't be removed when the
  # helm release is uninstalled.
  keep: true
  # Use an existing volume instead of creating a new one.
  existingClaim: ""
  storageClass: "default"
  accessMode: "ReadWriteOnce"
  size: "1Gi"
  annotations: {}

# Horizontal pod autoscaling.
# https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
autoscaling:
  enabled: false
  maxReplicas: 3
  minReplicas: 1
  cpuUtilizationPercentage: 80
  memoryUtilizationPercentage: 80
  annotations: {}

# Create a per-deployment service account.
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # If not set and create is true, a name is generated based on the chart
  # and release name.
  name: ""
  create: false
  annotations: {}

# Resource allocations/limits.
# https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
resources:
  requests:
    cpu: 20m
    memory: 32Mi
  limits:
    cpu: 100m
    memory: 128Mi

# Pod security settings.
# https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext: {}
securityContext: {}
  # readOnlyRootFilesystem: true
# runAsNonRoot: true

# Pod allocation settings.
# https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
nodeSelector: {}
tolerations: []
affinity: {}
